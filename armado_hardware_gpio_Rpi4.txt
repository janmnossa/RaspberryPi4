proceso armado de hardware

Rpi4 cumple con las espectativas de control de dispositivos a instalar

capacidades rpi4
Cuatro UARTs en Rpi4, se usaran 2 salidas UART y se usaran 8 puertos Gpio (por ahora)


mapa de pines uart disponibles
        TXD RXD CTS RTS     Board Pins
uart0   14  15              8   10
uart1   14  15              8   10
uart2   0   1   2   3       27  28  (I2C)
uart3   4   5   6   7       7   29
uart4   8   9   10  11      24  21  (SPI0)
uart5   12  13  14  15      32  33  (gpio-fan)

segun lo visto estan disponibles los uart4 y uart5
uart3 hace uso del gpio4 usado en el modulo gps

elegir pines a usar

17  x 
18  x

27
22

23
24

25

16
19

20
21

x se cambio de pines durante pruebas. 


+++++++++++++++++++++++++++++++++++++++++++
sistema gps adafruit ultimate gps pi hat
requiere bateria para almacenar datos, bateria CR1220
se requieren 5 pines + vcc + gnd
gpio04  
gpio14 TXD
gpio15 RXD
gpio00 EECTA ID_SD
gpio01 EECLK ID_SC
pin17 3v3
funciona ok, reporta datos una vez fix/sincronizado, la pila facilita el proceso

+++++++++++++++++++++++++++++++++++++++++++
sistema gsm
se requieren 2 pines + vcc + gnd
gpio12 TXD
gpio13 RXD

requiere reduccion de voltaje, 3.4-4.4 -> 5v
enciende pero no he logrado hacer que funcione la parte de consola/modem
el modem no es constante en su fucionamiento. problema electrico o fallo del modulo 

+++++++++++++++++++++++++++++++++++++++++++
sistema ultrasonico 
funciona a 5 voltios
por cada sensor se requieren 2 pines + vcc + gnd
cada pin de echo requiere divisor de voltaje para reducir al voltaje requerido 5.0->3.3
partes adquiridas, no implementado aun

trig out
echo in 

su1
trig gpio17
echo gpio18

problemas de lectura... valores locos
cambiar a 23 24
su1 ok
trig gpio23
echo gpio24

su2 ok
trig gpio27
echo gpio22

su3 ok
trig gpio16
echo gpio19

su4 ok
trig gpio20
echo gpio21

ok en forma independiente y asincrona

seleccion de pares contiguos en lo posible

realizado el montaje del hardware y establecidos los distintos pin/gpio a usar

configuracion de Rpi4 de Gpio
desactivar spi

configuracion modulo gps
lectura de datos a usar
envio de datos
almacenamiento de datos / actualizacion de ubicaciones en mapa

configuracion modulo gms
lectura de datos 
prueba de envio / recepcion de llamadas y sms 

configuracion de sensores ultrasonicos
lectura de datos
prueba de conteo de pasajeros
almacenamiento de datos 
envio de datos

configuracion de acceso remoto al modulo para pruebas

modulo gsm   Rpi4 
TX rojo   -> RX gpio13
RX marron -> TX gpio12

gpio12 TXD
gpio13 RXD


se activó el uso de vnc probado en eth0 y wifi
uso de rpi4 con vnc
usuario:pass pi:123456


pi@raspberrypi:~ $ raspi-gpio get 0-27
GPIO 0: level=1 fsel=0 func=INPUT pull=UP
GPIO 1: level=1 fsel=0 func=INPUT pull=UP
GPIO 2: level=1 fsel=0 func=INPUT pull=UP
GPIO 3: level=1 fsel=0 func=INPUT pull=UP
GPIO 4: level=1 fsel=0 func=INPUT pull=UP
GPIO 5: level=1 fsel=0 func=INPUT pull=UP
GPIO 6: level=0 fsel=0 func=INPUT pull=UP
GPIO 7: level=0 fsel=0 func=INPUT pull=UP
GPIO 8: level=1 fsel=0 func=INPUT pull=UP
GPIO 9: level=0 fsel=0 func=INPUT pull=DOWN
GPIO 10: level=0 fsel=0 func=INPUT pull=DOWN
GPIO 11: level=0 fsel=0 func=INPUT pull=DOWN
GPIO 12: level=0 fsel=3 alt=4 func=TXD5 pull=NONE
GPIO 13: level=1 fsel=3 alt=4 func=RXD5 pull=UP
GPIO 14: level=1 fsel=2 alt=5 func=TXD1 pull=NONE
GPIO 15: level=1 fsel=2 alt=5 func=RXD1 pull=UP
GPIO 16: level=0 fsel=1 func=OUTPUT pull=NONE
GPIO 17: level=0 fsel=0 func=INPUT pull=DOWN
GPIO 18: level=1 fsel=0 func=INPUT pull=DOWN
GPIO 19: level=0 fsel=0 func=INPUT pull=NONE
GPIO 20: level=0 fsel=1 func=OUTPUT pull=NONE
GPIO 21: level=0 fsel=0 func=INPUT pull=NONE
GPIO 22: level=0 fsel=0 func=INPUT pull=NONE
GPIO 23: level=0 fsel=1 func=OUTPUT pull=NONE
GPIO 24: level=0 fsel=0 func=INPUT pull=NONE
GPIO 25: level=0 fsel=0 func=INPUT pull=DOWN
GPIO 26: level=0 fsel=0 func=INPUT pull=DOWN
GPIO 27: level=0 fsel=1 func=OUTPUT pull=NONE

pi@raspberrypi:~ $ dmesg | grep tty
[    0.000000] Kernel command line: coherent_pool=1M 8250.nr_uarts=1 snd_bcm2835.enable_compat_alsa=0 snd_bcm2835.enable_hdmi=1 video=HDMI-A-1:1024x768M@60 smsc95xx.macaddr=DC:A6:32:8B:D7:A0 vc_mem.mem_base=0x3ec00000 vc_mem.mem_size=0x40000000  console=tty1 root=PARTUUID=72e0ebeb-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait
[    0.001548] printk: console [tty1] enabled
[    1.361458] fe201000.serial: ttyAMA0 at MMIO 0xfe201000 (irq = 29, base_baud = 0) is a PL011 rev2
[    1.363760] fe201a00.serial: ttyAMA1 at MMIO 0xfe201a00 (irq = 29, base_baud = 0) is a PL011 rev2
[    1.371841] fe215040.serial: ttyS0 at MMIO 0x0 (irq = 30, base_baud = 62500000) is a 16550
pi@raspberrypi:~ $ 

-----------------------
con la configuracion actual de pines hace que se presente un problema en el apagado de la Rpi4
se soluciona con esta instruccion, que requiere de un cambio en el archivo config.txt de la Rpi4
problema de apagado
WAKE_ON_GPIO
POWER_OFF_ON_HALT

sudo -E rpi-eeprom-config --edit
la edicion provoca un cambio en la eeprom y requiere reboot



---------------
para probar el gps, usar el archivo gps.sh
dar permisos de ejecucion al archivo, se hace una vez
pi@raspberrypi:~ $ chmod u+x gps.sh

ejecutar el archivo de prueba de gsm
pi@raspberrypi:~ $ ./gps.sh



--------------
para iniciar los programas de pyhton usar:

sudo python suX.py  

reemplazar la X con el numero del sensor ultrasonico a usar/probar. van del 1 al 4.
cada programa activa un sensor ultrasonico por separado.



